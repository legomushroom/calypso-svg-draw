// Generated by CoffeeScript 1.6.2
var Paths, connector, currentItem, hitOptions, movePath, onFrame, onMouseDown, onMouseDrag, onMouseMove, onMouseUp, path, segment;

segment = false;

path = false;

movePath = false;

connector = null;

currentItem = null;

hitOptions = {
  stroke: true,
  tolerance: 5
};

App.backgroundLayer = new Layer();

App.mainLayer = new Layer();

Paths = (function() {
  function Paths() {}

  Paths.prototype.backgroundRects = [];

  Paths.prototype.clearGrid = function() {
    var rect, _i, _len, _ref, _results;

    _ref = this.backgroundRects;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rect = _ref[_i];
      _results.push(rect.remove());
    }
    return _results;
  };

  Paths.prototype.refreshGrid = function() {
    var cell, i, j, line, rect, rectangle, x, y, _i, _j, _len, _len1, _ref;

    console.time('refresh grid');
    App.backgroundLayer.activate();
    this.clearGrid();
    _ref = App.grid;
    for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
      line = _ref[j];
      for (i = _j = 0, _len1 = line.length; _j < _len1; i = ++_j) {
        cell = line[i];
        if (cell !== 0) {
          x = i * App.gs;
          y = j * App.gs;
          rectangle = new Rectangle(new Point(x, y), new Point(x + App.gs, y + App.gs));
          rect = new Path.Rectangle(rectangle);
          rect.fillColor = 'red';
          rect.opacity = .05;
          rect.isBackground = true;
          this.backgroundRects.push(rect);
        }
      }
    }
    App.mainLayer.activate();
    return console.timeEnd('refresh grid');
  };

  return Paths;

})();

App.paths = new Paths;

onMouseDown = function(event) {
  var coords;

  if (App.main.tool !== 'path') {
    return;
  }
  if (!currentItem) {
    if (!connector) {
      connector = new Path;
      connector.strokeWidth = 4;
      connector.strokeColor = 'black';
    }
    coords = App.helpers.getNearestCellCenter(event.point);
    if (App.helpers.grid.isFreeCell(coords)) {
      connector.add(new Point(coords));
      return App.helpers.grid.holdCellXY(coords, connector);
    }
  }
};

onMouseDrag = function(event) {
  var coords;

  coords = App.helpers.getNearestCellCenter(event.point);
  if (currentItem) {
    return currentItem.position += event.delta;
  } else if (connector && App.helpers.grid.isFreeCell(coords)) {
    console.log('free');
    connector.add(new Point(coords));
    return App.helpers.grid.holdCellXY(coords, connector);
  }
};

onMouseUp = function(event) {
  var coords;

  connector = null;
  if (currentItem) {
    coords = App.helpers.getNearestCellCenter(currentItem.bounds);
    coords.x += currentItem.bounds.width / 2;
    coords.y += currentItem.bounds.height / 2;
    currentItem.position = coords;
    return App.helpers.grid.reposit(currentItem);
  }
};

onMouseMove = function(event) {
  project.activeLayer.selected = false;
  if (event.item && !event.item.isBackground) {
    event.item.selected = true;
    return currentItem = event.item;
  } else {
    return currentItem = false;
  }
};

onFrame = function(e) {};
