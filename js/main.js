// Generated by CoffeeScript 1.6.2
var Main;

App.unit = 8;

App.gs = 4 * App.unit;

App.gXCnt = 40;

App.gYCnt = 50;

App.gWidth = App.gs * App.gXCnt;

App.dev = {
  grid: true,
  time: true
};

Main = (function() {
  Main.prototype.tool = 'path';

  function Main() {
    $('body').css({
      'min-width': App.gWidth
    });
    $('body').css({
      'max-width': App.gWidth
    });
    $('body').css({
      'width': App.gWidth
    });
    this.getVars();
    App.helpers.grid.make();
    this.blocksInit();
  }

  Main.prototype.getVars = function() {
    this.$main = $('#js-main-l');
    return this.$mainH = $('#js-main-l').hammer();
  };

  Main.prototype.blocksInit = function() {
    var _this = this;

    this.$main.on('mousedown', function(e) {
      var coords;

      if (e.button !== 0 || _this.tool !== 'block' || $(e.target).hasClass('block-e')) {
        return;
      }
      coords = App.helpers.getNearestCell({
        x: e.pageX,
        y: e.pageY
      });
      return _this.$main.append(_this.$currentPlacePreview = $('<div>').addClass('place-preview-e').css({
        'top': coords.y,
        'left': coords.x
      }));
    });
    this.$main.on('mouseup', function(e) {
      var $el, _ref;

      if (_this.$currentPlacePreview && (_this.$currentPlacePreview.width() !== 0) && (_this.$currentPlacePreview.height() !== 0)) {
        $el = _this.$currentPlacePreview.clone().removeClass('place-preview-e').addClass('block-e').data('id', App.helpers.genHash());
        _this.$main.append($el);
        App.helpers.grid.posit($el);
      }
      if ((_ref = _this.$currentPlacePreview) != null) {
        _ref.remove();
      }
      return _this.$currentPlacePreview = null;
    });
    this.$mainH.on('drag', function(e) {
      var coords;

      if (!_this.$currentPlacePreview) {
        return;
      }
      coords = App.helpers.getNearestCell({
        x: e.gesture.deltaY,
        y: e.gesture.deltaX
      });
      return _this.$currentPlacePreview.css({
        'height': coords.x,
        'width': coords.y
      });
    });
    this.$main.on('mousedown', '.block-e', function(e) {
      _this.$currentBlock = $(e.target);
      return _this.currentBlockPosition = _this.$currentBlock.position();
    });
    this.$main.on('mouseup', '.block-e', function(e) {
      App.helpers.grid.reposit(_this.$currentBlock);
      _this.$currentBlock = null;
      return _this.currentBlockPosition = null;
    });
    return this.$mainH.on('drag', '.block-e', function(e) {
      var $el, coords, x, y;

      e.stopPropagation();
      $el = $(e.target);
      coords = App.helpers.getNearestCell({
        x: e.gesture.deltaX,
        y: e.gesture.deltaY
      });
      y = _this.currentBlockPosition.top + coords.y;
      x = _this.currentBlockPosition.left + coords.x;
      if (y < 0) {
        y = 0;
      }
      if (x < 0) {
        x = 0;
      }
      return $el.css({
        'top': y,
        'left': x
      });
    });
  };

  return Main;

})();

App.main = new Main;

App.gui = new dat.GUI();

App.gui.add(App.main, 'tool', ['path', 'block']);
