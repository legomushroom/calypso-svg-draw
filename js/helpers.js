// Generated by CoffeeScript 1.6.2
var App;

App = {};

Array.prototype.remove = function(from, to) {
  var rest;

  rest = this.slice((to || from) + 1 || this.length);
  this.length = (from < 0 ? this.length + from : from);
  return this.push.apply(this, rest);
};

App.helpers = {
  getNearestCell: function(coords) {
    var result, x, y;

    x = App.gs * ~~(coords.x / App.gs);
    y = App.gs * ~~(coords.y / App.gs);
    return result = {
      x: x,
      y: y
    };
  },
  getNearestCellCenter: function(coords) {
    var result;

    coords = this.getNearestCell(coords);
    return result = {
      x: coords.x + (App.gs / 2),
      y: coords.y + (App.gs / 2)
    };
  },
  timeIn: function(name) {
    return console.time(name);
  },
  timeOut: function(name) {
    return console.timeEnd(name);
  },
  genHash: function() {
    return md5((new Date) + (new Date).getMilliseconds() + Math.random(9999999999999) + Math.random(9999999999999) + Math.random(9999999999999));
  },
  grid: {
    timeIn: function(name) {
      return App.dev.time && console.time(name);
    },
    timeOut: function(name) {
      return App.dev.time && console.timeEnd(name);
    },
    make: function() {
      var i, j, line, _i, _j, _ref, _ref1, _results;

      App.grid = [];
      _results = [];
      for (j = _i = 0, _ref = App.gYCnt; 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        line = [];
        for (i = _j = 0, _ref1 = App.gXCnt; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          line.push(0);
        }
        _results.push(App.grid.push(line));
      }
      return _results;
    },
    isFreeCell: function(coords) {
      var ij;

      ij = this.toIJ(coords);
      return App.grid[ij.j][ij.i] === 0;
    },
    toIJ: function(coords) {
      var result;

      return result = {
        i: ~~(coords.x / App.gs),
        j: ~~(coords.y / App.gs)
      };
    },
    holdCell: function(ij, obj) {
      App.grid[ij.j][ij.i] = obj.id;
      return this.refreshGrid();
    },
    refreshGrid: function() {
      return App.dev.grid && App.paths.refreshGrid();
    },
    holdCellXY: function(coords, obj) {
      var ij;

      ij = this.toIJ(coords);
      return this.holdCell(ij, obj);
    },
    isNewSegment: function(segments, ij) {
      var i, ijLocal, segment, _i, _len;

      if (!segments.length) {
        return;
      }
      for (i = _i = 0, _len = segments.length; _i < _len; i = ++_i) {
        segment = segments[i];
        ijLocal = this.toIJ(segment.point);
        if ((ijLocal.i === ij.i) && (ijLocal.j === ij.j)) {
          segments.remove(i);
          return true;
        }
      }
    },
    reposit: function(obj) {
      var $obj, cell, i, id, j, line, metrics, segments, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;

      this.timeIn('reposit');
      if (obj instanceof $) {
        $obj = obj;
        metrics = this.getNodeIJMetrics($obj);
        id = $obj.data().id;
        _ref = App.grid;
        for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
          line = _ref[j];
          for (i = _j = 0, _len1 = line.length; _j < _len1; i = ++_j) {
            cell = line[i];
            if (cell === id) {
              App.grid[j][i] = 0;
            }
          }
        }
        this.posit(obj);
      } else {
        segments = obj.segments.slice(0);
        _ref1 = App.grid;
        for (j = _k = 0, _len2 = _ref1.length; _k < _len2; j = ++_k) {
          line = _ref1[j];
          for (i = _l = 0, _len3 = line.length; _l < _len3; i = ++_l) {
            cell = line[i];
            if (cell === obj.id) {
              App.grid[j][i] = 0;
            }
            if (this.isNewSegment(segments, {
              i: i,
              j: j
            })) {
              App.grid[j][i] = obj.id;
            }
          }
        }
      }
      this.refreshGrid();
      return this.timeOut('reposit');
    },
    posit: function(obj) {
      var $obj, i, id, j, metrics, _i, _j, _ref, _ref1, _ref2, _ref3;

      if (obj instanceof $) {
        $obj = obj;
        metrics = this.getNodeIJMetrics($obj);
        id = $obj.data().id;
        for (i = _i = _ref = metrics.coords.i, _ref1 = metrics.coords.i + metrics.size.i; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          for (j = _j = _ref2 = metrics.coords.j, _ref3 = metrics.coords.j + metrics.size.j; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            App.grid[j][i] = id;
          }
        }
      }
      return this.refreshGrid();
    },
    getNodeIJMetrics: function($obj) {
      var coords, metrics, position, size;

      position = $obj.position();
      coords = this.toIJ({
        x: position.left,
        y: position.top
      });
      size = this.toIJ({
        x: $obj.width(),
        y: $obj.height()
      });
      return metrics = {
        coords: coords,
        size: size
      };
    }
  }
};
